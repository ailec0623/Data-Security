d = {0:"0000", 1:"0001", 2:"0010", 3:"0011", 4:"0100", 5:"0101", 6:"0110", 7:"0111", 
    8:"1000", 9:"1001", 10:"1010", 11:"1011", 12:"1100", 13:"1101", 14:"1110", 15:"1111"}
def PC_1(lt):
    c_n = [57, 49, 41, 33, 25, 17, 9 ,
           1 , 58, 50, 42, 34, 26, 18,
           10, 2 , 59, 51, 43, 35, 27,
           19, 11, 3 , 60, 52, 44, 36]
    d_n = [63, 55, 47, 39, 31, 23, 15,
           7 , 62, 54, 46, 38, 30, 22,
           14, 6 , 61, 53, 45, 37, 29,
           21, 13, 5 , 28, 20, 12, 4 ]
    c0 = []
    d0 = []
    for i in c_n:
        c0.append(lt[i-1])
    for i in d_n:
        d0.append(lt[i-1])
    return c0, d0

def sh(c0, d0):
    l_s = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
    l_c = []
    l_d = []
    
    for i in l_s:
        for x in range(0,i):
            ct = c0[0]
            dt = d0[0]
            for j in range(0,27):
                c0[j] = c0[j+1]
                d0[j] = d0[j+1]
            c0[27] = ct
            d0[27] = dt

        l_c.append(c0[:])
        l_d.append(d0[:])

    return l_c, l_d

def key_gen(l_c,l_d):
    l = [14, 17, 11, 24, 1 , 5 , 3 , 28,
         15, 6 , 21, 10, 23, 19, 12, 4 ,
         26, 8 , 16, 7 , 27, 20, 13, 2 ,
         41, 52, 31, 37, 47, 55, 30, 40,
         51, 45, 33, 48, 44, 49, 39, 56,
         34, 53, 46, 42, 50, 36, 29, 32]
    l_k = []
    for i in range(0,len(l_c)):
        t = []
        for j in l:
            if j <29:
                t.append(l_c[i][j-1])
            else:
                t.append(l_d[i][j-29])
        l_k.append(t[:])
    return l_k

def IP(p0):
    l = [58, 50, 42, 34, 26, 18, 10, 2 ,
         60, 52, 44, 36, 28, 20, 12, 4 ,
         62, 54, 46, 38, 30, 22, 14, 6 , 
         64, 56, 48, 40, 32, 24, 16, 8 ,
         57, 49, 41, 33, 25, 17, 9 , 1 ,
         59, 51, 43, 35, 27, 19, 11, 3 ,
         61, 53, 45, 37, 29, 21, 13, 5 ,
         63, 55, 47, 39, 31, 23, 15, 7 ]
    ip = []
    for i in l:
        ip.append(p0[i-1])
    return ip

def IP_1(ip):
    l = [40, 8 , 48, 16, 56, 24, 64, 32,
         39, 7 , 47, 15, 55, 23, 63, 31,
         38, 6 , 46, 14, 54, 22, 62, 30,
         37, 5 , 45, 13, 53, 21, 61, 29,
         36, 4 , 44, 12, 52, 20, 60, 28,
         35, 3 , 43, 11, 51, 19, 59, 27,
         34, 2 , 42, 10, 50, 18, 58, 26,
         33, 1 , 41, 9 , 49, 17, 57, 25]
    p0 = []
    for i in l:
        p0.append(ip[i-1])
    return p0

def EP(half_p):
    l = [32, 1 , 2 , 3 , 4 , 5 ,
         4 , 5 , 6 , 7 , 8 , 9 ,
         8 , 9 , 10, 11, 12, 13,
         12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21,
         20, 21, 22, 23, 24, 25,
         24, 25, 26, 27, 28, 29,
         28, 29, 30, 31, 32, 1 ]
    ep = []
    for i in l:
        ep.append(half_p[i-1])
    return ep

def xor(a, b):
    r = []
    for i in range(0,len(a)):
        if a[i] != b[i]:
            r.append('1')
        else:
            r.append('0')
    return r

def S1(p):
    l = [[14, 4 , 13, 1 , 2 , 15, 11, 8 , 3 , 10, 6 , 12, 5 , 9 , 0 , 7 ],
         [0 , 15, 7 , 4 , 14, 2 , 13, 1 , 10, 6 , 12, 11, 9 , 5 , 3 , 8 ],
         [4 , 1 , 14, 8 , 13, 6 , 2 , 11, 15, 12, 9 , 7 , 3 , 10, 5 , 0 ],
         [15, 12, 8 , 2 , 4 , 9 , 1 , 7 , 5 , 11, 3 , 14, 10, 0 , 6 , 13]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S2(p):
    l = [[15, 1 , 8 , 14, 6 , 11, 3 , 4 , 9 , 7 , 2 , 13, 12, 0 , 5 , 10],
         [3 , 13, 4 , 7 , 15, 2 , 8 , 14, 12, 0 , 1 , 10, 6 , 9 , 11, 5 ],
         [0 , 14, 7 , 11, 10, 4 , 13, 1 , 5 , 8 , 12, 6 , 9 , 3 , 2 , 15],
         [13, 8 , 10, 1 , 3 , 15, 4 , 2 , 11, 6 , 7 , 12, 0 , 5 , 14, 9 ]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S3(p):
    l = [[10, 0 , 9 , 14, 6 , 3 , 15, 5 , 1 , 13, 12, 7 , 11, 4 , 2 , 8 ],
         [13, 7 , 0 , 9 , 3 , 4 , 6 , 10, 2 , 8 , 5 , 14, 12, 11, 15, 1 ],
         [13, 6 , 4 , 9 , 8 , 15, 3 , 0 , 11, 1 , 2 , 12, 5 , 10, 14, 7 ],
         [1 , 10, 13, 0 , 6 , 9 , 8 , 7 , 4 , 15, 14, 3 , 11, 5 , 2 , 12]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S4(p):
    l = [[7 , 13, 14, 3 , 0 , 6 , 9 , 10, 1 , 2 , 8 , 5 , 11, 12, 4 , 15],
         [13, 8 , 11, 5 , 6 , 15, 0 , 3 , 4 , 7 , 2 , 12, 1 , 10, 14, 9 ],
         [10, 6 , 9 , 0 , 12, 11, 7 , 13, 15, 1 , 3 , 14, 5 , 2 , 8 , 4 ],
         [3 , 15, 0 , 6 , 10, 1 , 13, 8 , 9 , 4 , 5 , 11, 12, 7 , 2 , 14]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S5(p):
    l = [[2 , 12, 4 , 1 , 7 , 10, 11, 6 , 8 , 5 , 3 , 15, 13, 0 , 14, 9 ],
         [14, 11, 2 , 12, 4 , 7 , 13, 1 , 5 , 0 , 15, 10, 3 , 9 , 8 , 6 ],
         [4 , 2 , 1 , 11, 10, 13, 7 , 8 , 15, 9 , 12, 5 , 6 , 3 , 0 , 14],
         [11, 8 , 12, 7 , 1 , 14, 2 , 13, 6 , 15, 0 , 9 , 10, 4 , 5 , 3 ]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S6(p):
    l = [[12, 1 , 10, 15, 9 , 2 , 6 , 8 , 0 , 13, 3 , 4 , 14, 7 , 5 , 11],
         [10, 15, 4 , 2 , 7 , 12, 9 , 5 , 6 , 1 , 13, 14, 0 , 11, 3 , 8 ],
         [9 , 14, 15, 5 , 2 , 8 , 12, 3 , 7 , 0 , 4 , 10, 1 , 13, 11, 6 ],
         [4 , 3 , 2 , 12, 9 , 5 , 15, 10, 11, 14, 1 , 7 , 6 , 0 , 8 , 13]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S7(p):
    l = [[4 , 11, 2 , 14, 15, 0 , 8 , 13, 3 , 12, 9 , 7 , 5 , 10, 6 , 1 ],
         [13, 0 , 11, 7 , 4 , 9 , 1 , 10, 14, 3 , 5 , 12, 2 , 15, 8 , 6 ],
         [1 , 4 , 11, 13, 12, 3 , 7 , 14, 10, 15, 6 , 8 , 0 , 5 , 9 , 2 ],
         [6 , 11, 13, 8 , 1 , 4 , 10, 7 , 9 , 5 , 0 , 15, 14, 2 , 3 , 12]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r
def S8(p):
    l = [[13, 2 , 8 , 4 , 6 , 15, 11, 1 , 10, 9 , 3 , 14, 5 , 0 , 12, 7 ],
         [1 , 15, 13, 8 , 10, 3 , 7 , 4 , 12, 5 , 6 , 11, 0 , 14, 9 , 2 ],
         [7 , 11, 4 , 1 , 9 , 12, 14, 2 , 0 , 6 , 10, 13, 15, 3 , 5 , 8 ],
         [2 , 1 , 14, 7 , 4 , 10, 8 , 13, 15, 12, 9 , 0 , 3 , 5 , 6 , 11]]
    t  = l[int(p[0])*2+int(p[-1])][int(p[1])*8+int(p[2])*4+int(p[3])*2+int(p[4])]
    r = []
    for i in d[t]:
        r.append(i)
    return r

def P(t):
    l = [16, 7 , 20, 21, 29, 12, 28, 17,
         1 , 15, 23, 26, 5 , 18, 31, 10,
         2 , 8 , 24, 14, 32, 27, 3 , 9 ,
         19, 13, 30, 6 , 22, 11, 4 , 25]
    r = []
    for i in l:
        r.append(t[i-1])
    return r

def cipher(p0,l_k):
    ip = IP(p0)
    l0 = ip[:32]
    r0 = ip[32:]
    for i in range(0, 16):
        temp = r0
        t0 = xor(EP(r0), l_k[i])
        #print(t0)
        t1 = []
        t1.extend(S1(t0[0:6]))
        t1.extend(S2(t0[6:12]))
        t1.extend(S3(t0[12:18]))
        t1.extend(S4(t0[18:24]))
        t1.extend(S5(t0[24:30]))
        t1.extend(S6(t0[30:36]))
        t1.extend(S7(t0[36:42]))
        t1.extend(S8(t0[42:48]))
        #print(t1)
        #print(P(t1))
        r0 = xor(l0, P(t1))
        l0 = temp
        #print(l0)
        #print(r0)
    r0.extend(l0)
    return IP_1(r0)